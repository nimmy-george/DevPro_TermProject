name: CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  code_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2 

    # #Using CUSTOM ACTIONS to install the requirements namely Python modules
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies

    - name: Install Flask and Flask-SQLAlchemy
      run: |
        pip install flask
        pip install flask-sqlalchemy
        pip install black
        pip install bandit
                
    - name: Run Tests
      run: python test_app.py 2>&1 | tee test-report.txt

    - name: Check code formatting
      run: |
        black .

    - name: Check for security vulnerabilities
      run: |
        bandit -r .

       
    - name: Archive test report
      uses: actions/upload-artifact@v2
      with:
        name: test-report
        path: test-report.txt

  deploy_staging:
    runs-on: ubuntu-latest
    environment:
      name: StagingEnvironment
    needs: code_test
    env:
      DOCKER_REGISTRY: docker.pkg.github.com
      DOCKER_USERNAME: nimmy-george
      DOCKER_IMAGE: devpro_termproject/dockerimage
      DOCKER_TAG: version

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Configure Docker registry
        run: |
          echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login -u "${DOCKER_USERNAME}" --password-stdin "${DOCKER_REGISTRY}"
     
      - name: Run Integration Tests
        run: |
          docker pull "${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}"
          docker run -it "${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}" python -m unittest discover -s ./ -p 'test_app.py' 2>&1 | tee TestReportStaging.txt
      
      - name: Archive test report
        uses: actions/upload-artifact@v2
        with:
         name: TestReportStaging
         path: TestReportStaging.txt
